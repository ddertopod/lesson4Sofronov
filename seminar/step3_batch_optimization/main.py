from src.batch_optimizer import BatchOptimizer
import os


def main():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
    """
    print("=== –®–∞–≥ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –¥–ª—è ONNX –º–æ–¥–µ–ª–∏ ===\n")

    onnx_path = "models/blip_model.onnx"
    if not os.path.exists(onnx_path):
        print(f"‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {onnx_path}")
        print("\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ step1:")
        print("cp ../step1_onnx_model/models/blip_model.onnx models/")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ ONNX –º–æ–¥–µ–ª—å: {onnx_path}")

    optimizer = BatchOptimizer(onnx_path)
    optimizer.load_model()

    print("\n1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–º–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    optimal_batch_quick, results_quick = optimizer.find_optimal_batch_size(
        max_batch_size=4, num_iterations=20, max_memory_mb=300, target_p95_ms=50
    )

    print(f"\n–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch_size: {optimal_batch_quick}")

    print("\n" + "=" * 50)
    print("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–±–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤)")

    optimal_batch_full, results_full = optimizer.find_optimal_batch_size(
        max_batch_size=8, num_iterations=40, max_memory_mb=500, target_p95_ms=100
    )

    results_full.to_csv("results/optimization_results.csv", index=False)
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: results/optimization_results.csv")

    optimizer.plot_results(results_full, "results/batch_optimization.png")

    print("\n" + "=" * 50)
    print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 50)
    print(f"–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch_size: {optimal_batch_quick}")
    print(f"–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch_size: {optimal_batch_full}")

    print("\n–¢–æ–ø-3 —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –ø–æ p95 latency per sample:")
    top_batches = results_full.nsmallest(3, "p95_latency_per_sample_ms")
    for i, (_, row) in enumerate(top_batches.iterrows(), 1):
        print(
            f"{i}. batch_size={int(row['batch_size'])}: "
            f"p95={row['p95_latency_per_sample_ms']:.2f}ms/sample, "
            f"throughput={row['throughput_samples_per_sec']:.1f} samples/sec"
        )

    print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìà –°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: results/batch_optimization.png")


if __name__ == "__main__":
    main()
