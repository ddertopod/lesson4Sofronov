import requests
import time


def test_onnx_api():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —Å ONNX –º–æ–¥–µ–ª—å—é –∏ —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    base_url = "http://localhost:8000"

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ONNX FastAPI —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n")

    print("1. Health Check:")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print("‚úÖ Health OK")
            print(f"   Model: {health_data.get('model_name', 'unknown')}")
            print(f"   Type: ONNX - {health_data.get('onnx_path', 'unknown')}")
        else:
            print(f"‚ùå Health failed: {response.status_code}")
            return
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ FastAPI —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: python main.py")
        return

    print("\n2. –¢–µ—Å—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    image_path = "test_images/img.jpg"

    try:
        with open(image_path, "rb") as f:
            files = {"file": (image_path, f, "image/jpeg")}

            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            start_time = time.time()

            response = requests.post(f"{base_url}/predict", files=files, timeout=60)

            end_time = time.time()
            request_time = (end_time - start_time) * 1000

            print(f"HTTP Response: {response.status_code}")
            print(f"Request time: {request_time:.2f} ms")

            if response.status_code == 200:
                result = response.json()
                print("‚úÖ ONNX Inference —É—Å–ø–µ—à–Ω–æ!")
                print(f"   Prediction: {result['result']['prediction']}")
                print(f"   Model type: {result['result']['model_type']}")
                print(f"   Success: {result['result']['success']}")
                print(
                    f"   Inference time: {result['result']['timing']['inference_ms']:.2f} ms"
                )

                if "onnx_details" in result["result"]:
                    onnx_info = result["result"]["onnx_details"]
                    print(
                        f"   ONNX token ID: {onnx_info.get('predicted_token_id', 'N/A')}"
                    )
                    print(
                        f"   ONNX logits shape: {onnx_info.get('logits_shape', 'N/A')}"
                    )

            else:
                print(f"‚ùå Inference failed: {response.text}")

    except FileNotFoundError:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ONNX API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_onnx_api()
